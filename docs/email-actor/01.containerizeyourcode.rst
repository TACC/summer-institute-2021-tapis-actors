Create a Custom Actor
=====================

This guide will demonstrate how to create a custom actor from scratch.

In this example, we will build a simple actor that emails the message
sent to it.


Components of an Actor
----------------------

Make a new directory and add the following files:

.. code-block:: bash

   $ mkdir email-actor/ && cd email-actor/

   $ touch Dockerfile requirements.txt actor.py

   $ tree ../email-actor/
   email-actor/
   ├── Dockerfile
   ├── requirements.txt
   └── actor.py

   0 directories, 3 files


Write the Actor Function
------------------------

The ``actor.py`` python script is where the code for your main function can
be found. An example of a functional actor that emails the message sent to it:

.. code-block:: python

   """Send Email from Actor with User Message"""
   from agavepy.actors import get_context
   import smtplib

   # function to email the message
   def email_message(m, user_email, user_password):
   """Send Email from Actor With User Message"""

      if m == " ":
          print("Empty Message!")
      else:
          sent_from = user_email
          to = ['emailaddress']
          subject = 'Actor Email'
          message = m

      try:
          smtp_server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
          smtp_server.ehlo()
          smtp_server.login(user_email, password)
          smtp_server.sendmail(sent_from, to, message)
          smtp_server.close()
          print("Email sent successfully!")
      except Exception as ex:
          print("Exception occured",ex)


    def main():
    """Main entry to grab message context from user input"""
        context = get_context()
        message = context['raw_message']
        user_email = context['USER_EMAIL']
        user_password = context['USER_PASSWORD']
        email_message(message, user_email, user_password)

    if __name__ == '__main__':
        main()



This code makes use of the **agavepy** python library which we will install in
the Docker container. The library includes an "actors" object which is useful to
grab the message and other context from the environment. And, it can be used to
interact with other parts of the Tapis platform. Add the above code to your
``actor.py`` file.

Here we are using the `smtplib <https://docs.python.org/3/library/smtplib.html>`_
SMTP protocol client to send email to any Internet machine.


Define Environment Variables
----------------------------

We will create another file called ``secrets.json``.
The ``secrets.json`` file may contain useful environment variables or
configurations to pass to the actor at creation time. These variables will be
part of the "context" taken from the environment, as in the example python
script above. For the purposes of this example, add the following definition to
``secrets.json``:

.. code-block:: json

   {
     "USER_EMAIL": "foo",
     "USER_PASSWORD": "bar"
   }

Since we are connecting to the smtp server, we will have to add our email credentials to the
above file.

Create a Dockerfile
-------------------

The requirements are python, agavepy which is
available through
`PyPi <https://pypi.org/>`_.
A bare-bones Dockerfile needs to satisfy those dependencies, add the actor
python script, and set a default command to run the actor python script. Add
the following lines to your ``Dockerfile``:

.. code-block:: bash

   # pull base image
   FROM python:3.6

   # add requirements.txt to docker container
   ADD requirements.txt /requirements.txt

   # install requirements.txt
   RUN pip3 install -r /requirements.txt

   # add the python script to docker container
   ADD actor.py /actor.py

   # command to run the python script
   CMD ["python", "/actor.py"]

.. tip::

   Creating small Docker images is important for maintaining actor speed and
   efficiency

Build and Push the Dockerfile
-----------------------------

The Docker image must be pushed to a public repository in order for the actor
to use it. Use the following Docker commands in your local actor folder to build
and push to a repository that you have access to:

.. code-block:: bash

   # Build and tag the image
   $ docker build -t taccuser/email-actor:1.0 .
   Sending build context to Docker daemon  4.096kB
   Step 1/5 : FROM python:3.7-slim
   ...
   Successfully built b0a76425e8b3
   Successfully tagged taccuser/email-actor:1.0

   # Push the tagged image to Docker Hub
   $ docker push taccuser/email-actor:1.0
   The push refers to repository [docker.io/taccuser/word-count]
   ...
   1.0: digest: sha256:67cc6f6f00589d9ae83b99d779e4893a25e103d07e4f660c14d9a0ee06a9ddaf size: 1995
